#!/usr/bin/env bash
set -euo pipefail

# =========================================================
# Debian 12/13 SSH/Screen/TUI 中文显示修复器（彩色版）
# 功能：locale、ncurses、SSH 环境、screen/tmux、less、readline、git 等一次修复
# 说明：不修复 VNC/物理屏幕中文显示问题，请改用 SSH
# =========================================================

LOG="/var/log/debian-zhfix.log"
touch "$LOG" 2>/dev/null || true

# ---------- 颜色 / Colors ----------
cecho() { # $1=color $2...=msg
  local c="${1:-}"; shift || true
  case "$c" in
    red)     printf "\033[31m%s\033[0m\n" "$*";;
    green)   printf "\033[32m%s\033[0m\n" "$*";;
    yellow)  printf "\033[33m%s\033[0m\n" "$*";;
    blue)    printf "\033[34m%s\033[0m\n" "$*";;
    magenta) printf "\033[35m%s\033[0m\n" "$*";;
    cyan)    printf "\033[36m%s\033[0m\n" "$*";;
    gray)    printf "\033[90m%s\033[0m\n" "$*";;
    *)       printf "%s\n" "$*";;
  esac
}
hr(){ printf -- "\033[90m------------------------------------------------------------\033[0m\n"; }

say(){ cecho cyan "[Info] $1 | $2"; }
warn(){ cecho yellow "[Warning] $1 | $2"; }
err(){ cecho red "[Error] $1 | $2" >&2; }

# 兼容旧调用别名
red(){ cecho red "$@"; }
green(){ cecho green "$@"; }
yellow(){ cecho yellow "$@"; }
blue(){ cecho blue "$@"; }

require_root() {
  if [[ ${EUID:-0} -ne 0 ]]; then
    err "请以 root 运行本脚本。" "Run this script as root."
    exit 1
  fi
}

check_debian_version() {
  if [[ -r /etc/os-release ]]; then
    . /etc/os-release
    case "${ID}-${VERSION_ID:-}" in
      debian-12*|debian-13*) say "检测到系统：${PRETTY_NAME:-未知}。" "Detected: ${PRETTY_NAME:-unknown}." ;;
      *)
        warn "检测到系统为：${PRETTY_NAME:-未知}。脚本仅针对 Debian 12/13 测试。" \
             "Detected ${PRETTY_NAME:-unknown}. Script tested for Debian 12/13 only."
        ;;
    esac
  else
    warn "无法检测系统版本，继续尝试……" "Cannot read /etc/os-release; proceeding…"
  fi
}

info_banner() {
  echo
  hr
  cecho green "Debian SSH/Screen/TUI 中文显示修复器"
  cecho magenta "Chinese TUI/SSH font & locale fixer"
  hr
  cecho yellow "注意：本脚本不修复 VNC/本地屏幕中文显示问题，请使用 SSH 终端。"
  cecho yellow "Note: This does NOT fix VNC/physical console issues. Use SSH terminal."
  hr
  echo
}

backup_file() {
  local f="$1"
  [[ -f "$f" ]] || return 0
  cp -a "$f" "${f}.bak.$(date +%s)" >>"$LOG" 2>&1 || true
  say "已备份 $f。" "Backed up $f."
}

append_once() {
  local line="$1" file="$2"
  grep -qxF "$line" "$file" 2>/dev/null || echo "$line" >>"$file"
}

sed_uncomment_locale() {
  local loc="$1" # e.g. 'zh_CN.UTF-8 UTF-8'
  local f="/etc/locale.gen"
  backup_file "$f"
  if grep -qE "^[#\s]*${loc//./\\.}" "$f"; then
    sed -ri "s|^[#\s]*(${loc//./\\.})|\1|g" "$f"
  else
    echo "$loc" >>"$f"
  fi
}

ensure_packages() {
  export DEBIAN_FRONTEND=noninteractive
  say "安装必要包（locales、ncurses-term）…" "Installing required packages (locales, ncurses-term)…"
  apt-get update -y >>"$LOG" 2>&1 || true
  apt-get install -y --no-install-recommends locales ncurses-term >>"$LOG" 2>&1
  cecho green "组件就绪。" ; cecho green "Components ready."
}

generate_locale() {
  local want_lang="$1"   # zh_CN.UTF-8
  say "启用并生成 Locale：$want_lang" "Enable & generate locale: $want_lang"
  sed_uncomment_locale "${want_lang} UTF-8"
  locale-gen >>"$LOG" 2>&1
}

set_default_locale() {
  local want_lang="$1"        # zh_CN.UTF-8
  local set_lcctype="$2"      # 1/0
  local set_lcall="$3"        # 1/0

  local args=("LANG=$want_lang")
  [[ "$set_lcctype" == "1" ]] && args+=("LC_CTYPE=$want_lang")
  [[ "$set_lcall"   == "1" ]] && args+=("LC_ALL=$want_lang")

  backup_file /etc/default/locale
  update-locale "${args[@]}" >>"$LOG" 2>&1

  backup_file /etc/environment
  touch /etc/environment
  grep -q '^LANG=' /etc/environment      || echo "LANG=$want_lang" >> /etc/environment
  if [[ "$set_lcctype" == "1" ]]; then
    grep -q '^LC_CTYPE=' /etc/environment || echo "LC_CTYPE=$want_lang" >> /etc/environment
  fi
  if [[ "$set_lcall" == "1" ]]; then
    grep -q '^LC_ALL=' /etc/environment   || echo "LC_ALL=$want_lang" >> /etc/environment
  fi

  say "默认语言环境已设置：LANG=$want_lang" "Default locale set: LANG=$want_lang"
}

write_profile_env() {
  local f="/etc/profile.d/99-zhcn-locale.sh"
  backup_file "$f"
  cat > "$f" <<'EOF'
# Generated by debian-zhfix
export NCURSES_NO_UTF8_ACS=1
[ -z "${TERM:-}" ] && export TERM=xterm-256color
export LESSCHARSET=utf-8
export LESS="-R"
EOF
  chmod 0644 "$f"
  say "写入 /etc/profile.d/99-zhcn-locale.sh" "Wrote /etc/profile.d/99-zhcn-locale.sh"
}

fix_readline_inputrc() {
  local f="/etc/inputrc"
  backup_file "$f"
  touch "$f"
  append_once "# >>> debian-zhfix (UTF-8 readline) >>>" "$f"
  append_once "set input-meta on" "$f"
  append_once "set output-meta on" "$f"
  append_once "set convert-meta off" "$f"
  append_once "# <<< debian-zhfix <<<" "$f"
  say "已调整 /etc/inputrc（readline UTF-8）。" "Adjusted /etc/inputrc (readline UTF-8)."
}

fix_screen() {
  if command -v screen >/dev/null 2>&1; then
    local f="/etc/screenrc"
    backup_file "$f"
    touch "$f"
    append_once "# >>> debian-zhfix (UTF-8 screen) >>>" "$f"
    append_once "defutf8 on" "$f"
    append_once "defencoding utf8" "$f"
    append_once "term screen-256color" "$f"
    append_once "# <<< debian-zhfix <<<" "$f"
    say "已调整 /etc/screenrc。" "Adjusted /etc/screenrc."
  fi
}

fix_tmux() {
  if command -v tmux >/dev/null 2>&1; then
    local f="/etc/tmux.conf"
    backup_file "$f"
    touch "$f"
    append_once "# >>> debian-zhfix (UTF-8 tmux) >>>" "$f"
    append_once 'set -g default-terminal "tmux-256color"' "$f"
    append_once 'set -as terminal-features "*:RGB"' "$f"
    append_once "# <<< debian-zhfix <<<" "$f"
    say "已调整 /etc/tmux.conf。" "Adjusted /etc/tmux.conf."
  fi
}

fix_git() {
  if command -v git >/dev/null 2>&1; then
    git config --system core.quotepath false || true
    say "已设置 git core.quotepath=false（直显中文文件名）。" \
        "Set git core.quotepath=false (show Chinese filenames)."
  fi
}

tune_sshd() {
  local f="/etc/ssh/sshd_config"
  if [[ -f "$f" ]]; then
    backup_file "$f"
    if grep -Eq '^\s*#?\s*AcceptEnv\b' "$f"; then
      sed -ri 's|^\s*#?\s*AcceptEnv.*|AcceptEnv LANG LC_*|g' "$f"
    else
      echo "AcceptEnv LANG LC_*" >>"$f"
    fi
    if grep -Eq '^\s*#?\s*PermitUserEnvironment\b' "$f"; then
      sed -ri 's|^\s*#?\s*PermitUserEnvironment.*|PermitUserEnvironment yes|g' "$f"
    else
      echo "PermitUserEnvironment yes" >>"$f"
    fi
    systemctl reload ssh || systemctl reload sshd || true
    say "已允许 SSH 透传语言环境并启用 ~/.ssh/environment。" \
        "SSH now accepts LANG/LC_* and allows ~/.ssh/environment."
  fi
}

summary() {
  echo
  hr
  cecho green "修复完成！建议重新登录 SSH 以让环境变量彻底生效。"
  cecho green "Done! Re-login via SSH to fully apply environment changes."
  hr
  cecho blue  "验证示例 / Verification:"
  cecho cyan  "  1) locale"
  cecho cyan  "  2) printf '中文边框测试：┌─┐\\n│中│\\n└─┘\\n'"
  cecho cyan  "  3) echo \$TERM  # xterm-256color/tmux-256color/screen-256color"
  echo
  cecho yellow "提示 / Notes:"
  cecho yellow "  - VNC/物理控制台中文显示不在处理范围，请使用 SSH。"
  cecho yellow "  - 若个别 TUI 框线字符异常，尝试重新登录或更换终端字体。"
  hr
}

run_all(){
  ensure_packages
  generate_locale "zh_CN.UTF-8"
  set_default_locale "zh_CN.UTF-8" "$1" "$2"   # $1=LC_CTYPE? $2=LC_ALL?
  write_profile_env
  fix_readline_inputrc
  fix_screen
  fix_tmux
  fix_git
  tune_sshd
  summary
}

main_menu() {
  cecho green "请选择模式 / Choose mode:"
  cecho yellow "  1) 一键修复（推荐）：设置 LANG + LC_CTYPE（不强制 LC_ALL）"
  cecho yellow "  2) 进阶（激进）：额外全局设置 LC_ALL=zh_CN.UTF-8"
  cecho yellow "  3) 退出 / Quit"
  if [[ -r /dev/tty ]]; then
    printf "\033[36m输入数字并回车 | Enter number: \033[0m" > /dev/tty
    read -r ans </dev/tty || ans=1
  else
    ans=1
  fi
  case "${ans:-1}" in
    1) run_all 1 0 ;;   # LC_CTYPE=1, LC_ALL=0
    2)
      warn "全局 LC_ALL 可能影响少数脚本行为（排序/对比等）。" \
           "Setting LC_ALL globally may affect some scripts."
      if [[ -r /dev/tty ]]; then
        printf "\033[36m仍要继续吗？(yes/NO): \033[0m" > /dev/tty
        read -r go </dev/tty || go=no
      else
        go=no
      fi
      if [[ "${go,,}" == "yes" ]]; then
        run_all 1 1
      else
        cecho magenta "已取消。" ; cecho magenta "Cancelled."
        exit 0
      fi
      ;;
    *) cecho magenta "已退出。" ; cecho magenta "Exited."; exit 0 ;;
  esac
}

# ----------------- 入口 -----------------
require_root
check_debian_version
info_banner
main_menu
